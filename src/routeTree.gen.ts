/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MapPlaygroundRouteImport } from './routes/map-playground'
import { Route as LoadingRouteImport } from './routes/loading'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LearningSubjectIdRouteImport } from './routes/learning/$subjectId'
import { Route as CalibrationSubjectIdRouteImport } from './routes/calibration/$subjectId'
import { Route as LearningArticleArticleIdRouteImport } from './routes/learning/article/$articleId'
import { ServerRoute as ApiLessonStreamServerRouteImport } from './routes/api/lesson-stream'
import { ServerRoute as ApiGenerateResponseServerRouteImport } from './routes/api/generate-response'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const MapPlaygroundRoute = MapPlaygroundRouteImport.update({
  id: '/map-playground',
  path: '/map-playground',
  getParentRoute: () => rootRouteImport,
} as any)
const LoadingRoute = LoadingRouteImport.update({
  id: '/loading',
  path: '/loading',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LearningSubjectIdRoute = LearningSubjectIdRouteImport.update({
  id: '/learning/$subjectId',
  path: '/learning/$subjectId',
  getParentRoute: () => rootRouteImport,
} as any)
const CalibrationSubjectIdRoute = CalibrationSubjectIdRouteImport.update({
  id: '/calibration/$subjectId',
  path: '/calibration/$subjectId',
  getParentRoute: () => rootRouteImport,
} as any)
const LearningArticleArticleIdRoute =
  LearningArticleArticleIdRouteImport.update({
    id: '/learning/article/$articleId',
    path: '/learning/article/$articleId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiLessonStreamServerRoute = ApiLessonStreamServerRouteImport.update({
  id: '/api/lesson-stream',
  path: '/api/lesson-stream',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiGenerateResponseServerRoute =
  ApiGenerateResponseServerRouteImport.update({
    id: '/api/generate-response',
    path: '/api/generate-response',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/loading': typeof LoadingRoute
  '/map-playground': typeof MapPlaygroundRoute
  '/calibration/$subjectId': typeof CalibrationSubjectIdRoute
  '/learning/$subjectId': typeof LearningSubjectIdRoute
  '/learning/article/$articleId': typeof LearningArticleArticleIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/loading': typeof LoadingRoute
  '/map-playground': typeof MapPlaygroundRoute
  '/calibration/$subjectId': typeof CalibrationSubjectIdRoute
  '/learning/$subjectId': typeof LearningSubjectIdRoute
  '/learning/article/$articleId': typeof LearningArticleArticleIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/loading': typeof LoadingRoute
  '/map-playground': typeof MapPlaygroundRoute
  '/calibration/$subjectId': typeof CalibrationSubjectIdRoute
  '/learning/$subjectId': typeof LearningSubjectIdRoute
  '/learning/article/$articleId': typeof LearningArticleArticleIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/loading'
    | '/map-playground'
    | '/calibration/$subjectId'
    | '/learning/$subjectId'
    | '/learning/article/$articleId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/loading'
    | '/map-playground'
    | '/calibration/$subjectId'
    | '/learning/$subjectId'
    | '/learning/article/$articleId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/loading'
    | '/map-playground'
    | '/calibration/$subjectId'
    | '/learning/$subjectId'
    | '/learning/article/$articleId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  LoadingRoute: typeof LoadingRoute
  MapPlaygroundRoute: typeof MapPlaygroundRoute
  CalibrationSubjectIdRoute: typeof CalibrationSubjectIdRoute
  LearningSubjectIdRoute: typeof LearningSubjectIdRoute
  LearningArticleArticleIdRoute: typeof LearningArticleArticleIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/generate-response': typeof ApiGenerateResponseServerRoute
  '/api/lesson-stream': typeof ApiLessonStreamServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/generate-response': typeof ApiGenerateResponseServerRoute
  '/api/lesson-stream': typeof ApiLessonStreamServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/generate-response': typeof ApiGenerateResponseServerRoute
  '/api/lesson-stream': typeof ApiLessonStreamServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/generate-response' | '/api/lesson-stream' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/generate-response' | '/api/lesson-stream' | '/api/auth/$'
  id:
    | '__root__'
    | '/api/generate-response'
    | '/api/lesson-stream'
    | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiGenerateResponseServerRoute: typeof ApiGenerateResponseServerRoute
  ApiLessonStreamServerRoute: typeof ApiLessonStreamServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/map-playground': {
      id: '/map-playground'
      path: '/map-playground'
      fullPath: '/map-playground'
      preLoaderRoute: typeof MapPlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loading': {
      id: '/loading'
      path: '/loading'
      fullPath: '/loading'
      preLoaderRoute: typeof LoadingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/learning/$subjectId': {
      id: '/learning/$subjectId'
      path: '/learning/$subjectId'
      fullPath: '/learning/$subjectId'
      preLoaderRoute: typeof LearningSubjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calibration/$subjectId': {
      id: '/calibration/$subjectId'
      path: '/calibration/$subjectId'
      fullPath: '/calibration/$subjectId'
      preLoaderRoute: typeof CalibrationSubjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/learning/article/$articleId': {
      id: '/learning/article/$articleId'
      path: '/learning/article/$articleId'
      fullPath: '/learning/article/$articleId'
      preLoaderRoute: typeof LearningArticleArticleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/lesson-stream': {
      id: '/api/lesson-stream'
      path: '/api/lesson-stream'
      fullPath: '/api/lesson-stream'
      preLoaderRoute: typeof ApiLessonStreamServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/generate-response': {
      id: '/api/generate-response'
      path: '/api/generate-response'
      fullPath: '/api/generate-response'
      preLoaderRoute: typeof ApiGenerateResponseServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  LoadingRoute: LoadingRoute,
  MapPlaygroundRoute: MapPlaygroundRoute,
  CalibrationSubjectIdRoute: CalibrationSubjectIdRoute,
  LearningSubjectIdRoute: LearningSubjectIdRoute,
  LearningArticleArticleIdRoute: LearningArticleArticleIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiGenerateResponseServerRoute: ApiGenerateResponseServerRoute,
  ApiLessonStreamServerRoute: ApiLessonStreamServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
