/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `LearningMap` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model LearningMap
 *
 */
export type LearningMapModel = runtime.Types.Result.DefaultSelection<Prisma.$LearningMapPayload>;

export type AggregateLearningMap = {
  _count: LearningMapCountAggregateOutputType | null;
  _min: LearningMapMinAggregateOutputType | null;
  _max: LearningMapMaxAggregateOutputType | null;
};

export type LearningMapMinAggregateOutputType = {
  id: string | null;
  subjectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type LearningMapMaxAggregateOutputType = {
  id: string | null;
  subjectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type LearningMapCountAggregateOutputType = {
  id: number;
  subjectId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type LearningMapMinAggregateInputType = {
  id?: true;
  subjectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type LearningMapMaxAggregateInputType = {
  id?: true;
  subjectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type LearningMapCountAggregateInputType = {
  id?: true;
  subjectId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type LearningMapAggregateArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LearningMap to aggregate.
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LearningMaps to fetch.
   */
  orderBy?:
    | Prisma.LearningMapOrderByWithRelationInput
    | Prisma.LearningMapOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.LearningMapWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LearningMaps from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LearningMaps.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned LearningMaps
   **/
  _count?: true | LearningMapCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: LearningMapMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: LearningMapMaxAggregateInputType;
};

export type GetLearningMapAggregateType<T extends LearningMapAggregateArgs> = {
  [P in keyof T & keyof AggregateLearningMap]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLearningMap[P]>
    : Prisma.GetScalarType<T[P], AggregateLearningMap[P]>;
};

export type LearningMapGroupByArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.LearningMapWhereInput;
  orderBy?:
    | Prisma.LearningMapOrderByWithAggregationInput
    | Prisma.LearningMapOrderByWithAggregationInput[];
  by: Prisma.LearningMapScalarFieldEnum[] | Prisma.LearningMapScalarFieldEnum;
  having?: Prisma.LearningMapScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: LearningMapCountAggregateInputType | true;
  _min?: LearningMapMinAggregateInputType;
  _max?: LearningMapMaxAggregateInputType;
};

export type LearningMapGroupByOutputType = {
  id: string;
  subjectId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: LearningMapCountAggregateOutputType | null;
  _min: LearningMapMinAggregateOutputType | null;
  _max: LearningMapMaxAggregateOutputType | null;
};

type GetLearningMapGroupByPayload<T extends LearningMapGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LearningMapGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof LearningMapGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], LearningMapGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], LearningMapGroupByOutputType[P]>;
    }
  >
>;

export type LearningMapWhereInput = {
  AND?: Prisma.LearningMapWhereInput | Prisma.LearningMapWhereInput[];
  OR?: Prisma.LearningMapWhereInput[];
  NOT?: Prisma.LearningMapWhereInput | Prisma.LearningMapWhereInput[];
  id?: Prisma.StringFilter<"LearningMap"> | string;
  subjectId?: Prisma.StringFilter<"LearningMap"> | string;
  createdAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
  articles?: Prisma.ArticleListRelationFilter;
  subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>;
  questions?: Prisma.QuestionListRelationFilter;
};

export type LearningMapOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  articles?: Prisma.ArticleOrderByRelationAggregateInput;
  subject?: Prisma.SubjectOrderByWithRelationInput;
  questions?: Prisma.QuestionOrderByRelationAggregateInput;
};

export type LearningMapWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.LearningMapWhereInput | Prisma.LearningMapWhereInput[];
    OR?: Prisma.LearningMapWhereInput[];
    NOT?: Prisma.LearningMapWhereInput | Prisma.LearningMapWhereInput[];
    subjectId?: Prisma.StringFilter<"LearningMap"> | string;
    createdAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
    articles?: Prisma.ArticleListRelationFilter;
    subject?: Prisma.XOR<Prisma.SubjectScalarRelationFilter, Prisma.SubjectWhereInput>;
    questions?: Prisma.QuestionListRelationFilter;
  },
  "id"
>;

export type LearningMapOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.LearningMapCountOrderByAggregateInput;
  _max?: Prisma.LearningMapMaxOrderByAggregateInput;
  _min?: Prisma.LearningMapMinOrderByAggregateInput;
};

export type LearningMapScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.LearningMapScalarWhereWithAggregatesInput
    | Prisma.LearningMapScalarWhereWithAggregatesInput[];
  OR?: Prisma.LearningMapScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.LearningMapScalarWhereWithAggregatesInput
    | Prisma.LearningMapScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"LearningMap"> | string;
  subjectId?: Prisma.StringWithAggregatesFilter<"LearningMap"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LearningMap"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LearningMap"> | Date | string;
};

export type LearningMapCreateInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleCreateNestedManyWithoutLearningMapInput;
  subject: Prisma.SubjectCreateNestedOneWithoutLearningMapsInput;
  questions?: Prisma.QuestionCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapUncheckedCreateInput = {
  id?: string;
  subjectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleUncheckedCreateNestedManyWithoutLearningMapInput;
  questions?: Prisma.QuestionUncheckedCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUpdateManyWithoutLearningMapNestedInput;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutLearningMapsNestedInput;
  questions?: Prisma.QuestionUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUncheckedUpdateManyWithoutLearningMapNestedInput;
  questions?: Prisma.QuestionUncheckedUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapCreateManyInput = {
  id?: string;
  subjectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type LearningMapUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LearningMapUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type LearningMapListRelationFilter = {
  every?: Prisma.LearningMapWhereInput;
  some?: Prisma.LearningMapWhereInput;
  none?: Prisma.LearningMapWhereInput;
};

export type LearningMapOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type LearningMapCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type LearningMapMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type LearningMapMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  subjectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type LearningMapScalarRelationFilter = {
  is?: Prisma.LearningMapWhereInput;
  isNot?: Prisma.LearningMapWhereInput;
};

export type LearningMapCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.LearningMapCreateWithoutSubjectInput,
        Prisma.LearningMapUncheckedCreateWithoutSubjectInput
      >
    | Prisma.LearningMapCreateWithoutSubjectInput[]
    | Prisma.LearningMapUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.LearningMapCreateManySubjectInputEnvelope;
  connect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
};

export type LearningMapUncheckedCreateNestedManyWithoutSubjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.LearningMapCreateWithoutSubjectInput,
        Prisma.LearningMapUncheckedCreateWithoutSubjectInput
      >
    | Prisma.LearningMapCreateWithoutSubjectInput[]
    | Prisma.LearningMapUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput[];
  createMany?: Prisma.LearningMapCreateManySubjectInputEnvelope;
  connect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
};

export type LearningMapUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LearningMapCreateWithoutSubjectInput,
        Prisma.LearningMapUncheckedCreateWithoutSubjectInput
      >
    | Prisma.LearningMapCreateWithoutSubjectInput[]
    | Prisma.LearningMapUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.LearningMapUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.LearningMapUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.LearningMapCreateManySubjectInputEnvelope;
  set?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  disconnect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  delete?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  connect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  update?:
    | Prisma.LearningMapUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.LearningMapUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.LearningMapUpdateManyWithWhereWithoutSubjectInput
    | Prisma.LearningMapUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?: Prisma.LearningMapScalarWhereInput | Prisma.LearningMapScalarWhereInput[];
};

export type LearningMapUncheckedUpdateManyWithoutSubjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.LearningMapCreateWithoutSubjectInput,
        Prisma.LearningMapUncheckedCreateWithoutSubjectInput
      >
    | Prisma.LearningMapCreateWithoutSubjectInput[]
    | Prisma.LearningMapUncheckedCreateWithoutSubjectInput[];
  connectOrCreate?:
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput
    | Prisma.LearningMapCreateOrConnectWithoutSubjectInput[];
  upsert?:
    | Prisma.LearningMapUpsertWithWhereUniqueWithoutSubjectInput
    | Prisma.LearningMapUpsertWithWhereUniqueWithoutSubjectInput[];
  createMany?: Prisma.LearningMapCreateManySubjectInputEnvelope;
  set?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  disconnect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  delete?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  connect?: Prisma.LearningMapWhereUniqueInput | Prisma.LearningMapWhereUniqueInput[];
  update?:
    | Prisma.LearningMapUpdateWithWhereUniqueWithoutSubjectInput
    | Prisma.LearningMapUpdateWithWhereUniqueWithoutSubjectInput[];
  updateMany?:
    | Prisma.LearningMapUpdateManyWithWhereWithoutSubjectInput
    | Prisma.LearningMapUpdateManyWithWhereWithoutSubjectInput[];
  deleteMany?: Prisma.LearningMapScalarWhereInput | Prisma.LearningMapScalarWhereInput[];
};

export type LearningMapCreateNestedOneWithoutArticlesInput = {
  create?: Prisma.XOR<
    Prisma.LearningMapCreateWithoutArticlesInput,
    Prisma.LearningMapUncheckedCreateWithoutArticlesInput
  >;
  connectOrCreate?: Prisma.LearningMapCreateOrConnectWithoutArticlesInput;
  connect?: Prisma.LearningMapWhereUniqueInput;
};

export type LearningMapUpdateOneRequiredWithoutArticlesNestedInput = {
  create?: Prisma.XOR<
    Prisma.LearningMapCreateWithoutArticlesInput,
    Prisma.LearningMapUncheckedCreateWithoutArticlesInput
  >;
  connectOrCreate?: Prisma.LearningMapCreateOrConnectWithoutArticlesInput;
  upsert?: Prisma.LearningMapUpsertWithoutArticlesInput;
  connect?: Prisma.LearningMapWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.LearningMapUpdateToOneWithWhereWithoutArticlesInput,
      Prisma.LearningMapUpdateWithoutArticlesInput
    >,
    Prisma.LearningMapUncheckedUpdateWithoutArticlesInput
  >;
};

export type LearningMapCreateNestedOneWithoutQuestionsInput = {
  create?: Prisma.XOR<
    Prisma.LearningMapCreateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedCreateWithoutQuestionsInput
  >;
  connectOrCreate?: Prisma.LearningMapCreateOrConnectWithoutQuestionsInput;
  connect?: Prisma.LearningMapWhereUniqueInput;
};

export type LearningMapUpdateOneRequiredWithoutQuestionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.LearningMapCreateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedCreateWithoutQuestionsInput
  >;
  connectOrCreate?: Prisma.LearningMapCreateOrConnectWithoutQuestionsInput;
  upsert?: Prisma.LearningMapUpsertWithoutQuestionsInput;
  connect?: Prisma.LearningMapWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.LearningMapUpdateToOneWithWhereWithoutQuestionsInput,
      Prisma.LearningMapUpdateWithoutQuestionsInput
    >,
    Prisma.LearningMapUncheckedUpdateWithoutQuestionsInput
  >;
};

export type LearningMapCreateWithoutSubjectInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleCreateNestedManyWithoutLearningMapInput;
  questions?: Prisma.QuestionCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapUncheckedCreateWithoutSubjectInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleUncheckedCreateNestedManyWithoutLearningMapInput;
  questions?: Prisma.QuestionUncheckedCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapCreateOrConnectWithoutSubjectInput = {
  where: Prisma.LearningMapWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutSubjectInput,
    Prisma.LearningMapUncheckedCreateWithoutSubjectInput
  >;
};

export type LearningMapCreateManySubjectInputEnvelope = {
  data: Prisma.LearningMapCreateManySubjectInput | Prisma.LearningMapCreateManySubjectInput[];
  skipDuplicates?: boolean;
};

export type LearningMapUpsertWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.LearningMapWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutSubjectInput,
    Prisma.LearningMapUncheckedUpdateWithoutSubjectInput
  >;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutSubjectInput,
    Prisma.LearningMapUncheckedCreateWithoutSubjectInput
  >;
};

export type LearningMapUpdateWithWhereUniqueWithoutSubjectInput = {
  where: Prisma.LearningMapWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutSubjectInput,
    Prisma.LearningMapUncheckedUpdateWithoutSubjectInput
  >;
};

export type LearningMapUpdateManyWithWhereWithoutSubjectInput = {
  where: Prisma.LearningMapScalarWhereInput;
  data: Prisma.XOR<
    Prisma.LearningMapUpdateManyMutationInput,
    Prisma.LearningMapUncheckedUpdateManyWithoutSubjectInput
  >;
};

export type LearningMapScalarWhereInput = {
  AND?: Prisma.LearningMapScalarWhereInput | Prisma.LearningMapScalarWhereInput[];
  OR?: Prisma.LearningMapScalarWhereInput[];
  NOT?: Prisma.LearningMapScalarWhereInput | Prisma.LearningMapScalarWhereInput[];
  id?: Prisma.StringFilter<"LearningMap"> | string;
  subjectId?: Prisma.StringFilter<"LearningMap"> | string;
  createdAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"LearningMap"> | Date | string;
};

export type LearningMapCreateWithoutArticlesInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  subject: Prisma.SubjectCreateNestedOneWithoutLearningMapsInput;
  questions?: Prisma.QuestionCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapUncheckedCreateWithoutArticlesInput = {
  id?: string;
  subjectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  questions?: Prisma.QuestionUncheckedCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapCreateOrConnectWithoutArticlesInput = {
  where: Prisma.LearningMapWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutArticlesInput,
    Prisma.LearningMapUncheckedCreateWithoutArticlesInput
  >;
};

export type LearningMapUpsertWithoutArticlesInput = {
  update: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutArticlesInput,
    Prisma.LearningMapUncheckedUpdateWithoutArticlesInput
  >;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutArticlesInput,
    Prisma.LearningMapUncheckedCreateWithoutArticlesInput
  >;
  where?: Prisma.LearningMapWhereInput;
};

export type LearningMapUpdateToOneWithWhereWithoutArticlesInput = {
  where?: Prisma.LearningMapWhereInput;
  data: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutArticlesInput,
    Prisma.LearningMapUncheckedUpdateWithoutArticlesInput
  >;
};

export type LearningMapUpdateWithoutArticlesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutLearningMapsNestedInput;
  questions?: Prisma.QuestionUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapUncheckedUpdateWithoutArticlesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  questions?: Prisma.QuestionUncheckedUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapCreateWithoutQuestionsInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleCreateNestedManyWithoutLearningMapInput;
  subject: Prisma.SubjectCreateNestedOneWithoutLearningMapsInput;
};

export type LearningMapUncheckedCreateWithoutQuestionsInput = {
  id?: string;
  subjectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  articles?: Prisma.ArticleUncheckedCreateNestedManyWithoutLearningMapInput;
};

export type LearningMapCreateOrConnectWithoutQuestionsInput = {
  where: Prisma.LearningMapWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedCreateWithoutQuestionsInput
  >;
};

export type LearningMapUpsertWithoutQuestionsInput = {
  update: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedUpdateWithoutQuestionsInput
  >;
  create: Prisma.XOR<
    Prisma.LearningMapCreateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedCreateWithoutQuestionsInput
  >;
  where?: Prisma.LearningMapWhereInput;
};

export type LearningMapUpdateToOneWithWhereWithoutQuestionsInput = {
  where?: Prisma.LearningMapWhereInput;
  data: Prisma.XOR<
    Prisma.LearningMapUpdateWithoutQuestionsInput,
    Prisma.LearningMapUncheckedUpdateWithoutQuestionsInput
  >;
};

export type LearningMapUpdateWithoutQuestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUpdateManyWithoutLearningMapNestedInput;
  subject?: Prisma.SubjectUpdateOneRequiredWithoutLearningMapsNestedInput;
};

export type LearningMapUncheckedUpdateWithoutQuestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  subjectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUncheckedUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapCreateManySubjectInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type LearningMapUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUpdateManyWithoutLearningMapNestedInput;
  questions?: Prisma.QuestionUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapUncheckedUpdateWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  articles?: Prisma.ArticleUncheckedUpdateManyWithoutLearningMapNestedInput;
  questions?: Prisma.QuestionUncheckedUpdateManyWithoutLearningMapNestedInput;
};

export type LearningMapUncheckedUpdateManyWithoutSubjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type LearningMapCountOutputType
 */

export type LearningMapCountOutputType = {
  articles: number;
  questions: number;
};

export type LearningMapCountOutputTypeSelect<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  articles?: boolean | LearningMapCountOutputTypeCountArticlesArgs;
  questions?: boolean | LearningMapCountOutputTypeCountQuestionsArgs;
};

/**
 * LearningMapCountOutputType without action
 */
export type LearningMapCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMapCountOutputType
   */
  select?: Prisma.LearningMapCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * LearningMapCountOutputType without action
 */
export type LearningMapCountOutputTypeCountArticlesArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ArticleWhereInput;
};

/**
 * LearningMapCountOutputType without action
 */
export type LearningMapCountOutputTypeCountQuestionsArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.QuestionWhereInput;
};

export type LearningMapSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    articles?: boolean | Prisma.LearningMap$articlesArgs<ExtArgs>;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
    questions?: boolean | Prisma.LearningMap$questionsArgs<ExtArgs>;
    _count?: boolean | Prisma.LearningMapCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["learningMap"]
>;

export type LearningMapSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["learningMap"]
>;

export type LearningMapSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    subjectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["learningMap"]
>;

export type LearningMapSelectScalar = {
  id?: boolean;
  subjectId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type LearningMapOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "subjectId" | "createdAt" | "updatedAt",
  ExtArgs["result"]["learningMap"]
>;
export type LearningMapInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  articles?: boolean | Prisma.LearningMap$articlesArgs<ExtArgs>;
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
  questions?: boolean | Prisma.LearningMap$questionsArgs<ExtArgs>;
  _count?: boolean | Prisma.LearningMapCountOutputTypeDefaultArgs<ExtArgs>;
};
export type LearningMapIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
};
export type LearningMapIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  subject?: boolean | Prisma.SubjectDefaultArgs<ExtArgs>;
};

export type $LearningMapPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "LearningMap";
  objects: {
    articles: Prisma.$ArticlePayload<ExtArgs>[];
    subject: Prisma.$SubjectPayload<ExtArgs>;
    questions: Prisma.$QuestionPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      subjectId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["learningMap"]
  >;
  composites: {};
};

export type LearningMapGetPayload<S extends boolean | null | undefined | LearningMapDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$LearningMapPayload, S>;

export type LearningMapCountArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<LearningMapFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: LearningMapCountAggregateInputType | true;
};

export interface LearningMapDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["LearningMap"];
    meta: { name: "LearningMap" };
  };
  /**
   * Find zero or one LearningMap that matches the filter.
   * @param {LearningMapFindUniqueArgs} args - Arguments to find a LearningMap
   * @example
   * // Get one LearningMap
   * const learningMap = await prisma.learningMap.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LearningMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, LearningMapFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one LearningMap that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LearningMapFindUniqueOrThrowArgs} args - Arguments to find a LearningMap
   * @example
   * // Get one LearningMap
   * const learningMap = await prisma.learningMap.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LearningMapFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, LearningMapFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LearningMap that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapFindFirstArgs} args - Arguments to find a LearningMap
   * @example
   * // Get one LearningMap
   * const learningMap = await prisma.learningMap.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LearningMapFindFirstArgs>(
    args?: Prisma.SelectSubset<T, LearningMapFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first LearningMap that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapFindFirstOrThrowArgs} args - Arguments to find a LearningMap
   * @example
   * // Get one LearningMap
   * const learningMap = await prisma.learningMap.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LearningMapFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, LearningMapFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more LearningMaps that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LearningMaps
   * const learningMaps = await prisma.learningMap.findMany()
   *
   * // Get first 10 LearningMaps
   * const learningMaps = await prisma.learningMap.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const learningMapWithIdOnly = await prisma.learningMap.findMany({ select: { id: true } })
   *
   */
  findMany<T extends LearningMapFindManyArgs>(
    args?: Prisma.SelectSubset<T, LearningMapFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a LearningMap.
   * @param {LearningMapCreateArgs} args - Arguments to create a LearningMap.
   * @example
   * // Create one LearningMap
   * const LearningMap = await prisma.learningMap.create({
   *   data: {
   *     // ... data to create a LearningMap
   *   }
   * })
   *
   */
  create<T extends LearningMapCreateArgs>(
    args: Prisma.SelectSubset<T, LearningMapCreateArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many LearningMaps.
   * @param {LearningMapCreateManyArgs} args - Arguments to create many LearningMaps.
   * @example
   * // Create many LearningMaps
   * const learningMap = await prisma.learningMap.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends LearningMapCreateManyArgs>(
    args?: Prisma.SelectSubset<T, LearningMapCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many LearningMaps and returns the data saved in the database.
   * @param {LearningMapCreateManyAndReturnArgs} args - Arguments to create many LearningMaps.
   * @example
   * // Create many LearningMaps
   * const learningMap = await prisma.learningMap.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many LearningMaps and only return the `id`
   * const learningMapWithIdOnly = await prisma.learningMap.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends LearningMapCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, LearningMapCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a LearningMap.
   * @param {LearningMapDeleteArgs} args - Arguments to delete one LearningMap.
   * @example
   * // Delete one LearningMap
   * const LearningMap = await prisma.learningMap.delete({
   *   where: {
   *     // ... filter to delete one LearningMap
   *   }
   * })
   *
   */
  delete<T extends LearningMapDeleteArgs>(
    args: Prisma.SelectSubset<T, LearningMapDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one LearningMap.
   * @param {LearningMapUpdateArgs} args - Arguments to update one LearningMap.
   * @example
   * // Update one LearningMap
   * const learningMap = await prisma.learningMap.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends LearningMapUpdateArgs>(
    args: Prisma.SelectSubset<T, LearningMapUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more LearningMaps.
   * @param {LearningMapDeleteManyArgs} args - Arguments to filter LearningMaps to delete.
   * @example
   * // Delete a few LearningMaps
   * const { count } = await prisma.learningMap.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends LearningMapDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, LearningMapDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LearningMaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LearningMaps
   * const learningMap = await prisma.learningMap.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends LearningMapUpdateManyArgs>(
    args: Prisma.SelectSubset<T, LearningMapUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more LearningMaps and returns the data updated in the database.
   * @param {LearningMapUpdateManyAndReturnArgs} args - Arguments to update many LearningMaps.
   * @example
   * // Update many LearningMaps
   * const learningMap = await prisma.learningMap.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more LearningMaps and only return the `id`
   * const learningMapWithIdOnly = await prisma.learningMap.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends LearningMapUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, LearningMapUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one LearningMap.
   * @param {LearningMapUpsertArgs} args - Arguments to update or create a LearningMap.
   * @example
   * // Update or create a LearningMap
   * const learningMap = await prisma.learningMap.upsert({
   *   create: {
   *     // ... data to create a LearningMap
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LearningMap we want to update
   *   }
   * })
   */
  upsert<T extends LearningMapUpsertArgs>(
    args: Prisma.SelectSubset<T, LearningMapUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__LearningMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$LearningMapPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of LearningMaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapCountArgs} args - Arguments to filter LearningMaps to count.
   * @example
   * // Count the number of LearningMaps
   * const count = await prisma.learningMap.count({
   *   where: {
   *     // ... the filter for the LearningMaps we want to count
   *   }
   * })
   **/
  count<T extends LearningMapCountArgs>(
    args?: Prisma.Subset<T, LearningMapCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], LearningMapCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a LearningMap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends LearningMapAggregateArgs>(
    args: Prisma.Subset<T, LearningMapAggregateArgs>
  ): Prisma.PrismaPromise<GetLearningMapAggregateType<T>>;

  /**
   * Group by LearningMap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LearningMapGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends LearningMapGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LearningMapGroupByArgs["orderBy"] }
      : { orderBy?: LearningMapGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, LearningMapGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetLearningMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the LearningMap model
   */
  readonly fields: LearningMapFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LearningMap.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LearningMapClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  articles<T extends Prisma.LearningMap$articlesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.LearningMap$articlesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ArticlePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  subject<T extends Prisma.SubjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.SubjectDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__SubjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$SubjectPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  questions<T extends Prisma.LearningMap$questionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.LearningMap$questionsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$QuestionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the LearningMap model
 */
export interface LearningMapFieldRefs {
  readonly id: Prisma.FieldRef<"LearningMap", "String">;
  readonly subjectId: Prisma.FieldRef<"LearningMap", "String">;
  readonly createdAt: Prisma.FieldRef<"LearningMap", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"LearningMap", "DateTime">;
}

// Custom InputTypes
/**
 * LearningMap findUnique
 */
export type LearningMapFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter, which LearningMap to fetch.
   */
  where: Prisma.LearningMapWhereUniqueInput;
};

/**
 * LearningMap findUniqueOrThrow
 */
export type LearningMapFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter, which LearningMap to fetch.
   */
  where: Prisma.LearningMapWhereUniqueInput;
};

/**
 * LearningMap findFirst
 */
export type LearningMapFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter, which LearningMap to fetch.
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LearningMaps to fetch.
   */
  orderBy?:
    | Prisma.LearningMapOrderByWithRelationInput
    | Prisma.LearningMapOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LearningMaps.
   */
  cursor?: Prisma.LearningMapWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LearningMaps from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LearningMaps.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LearningMaps.
   */
  distinct?: Prisma.LearningMapScalarFieldEnum | Prisma.LearningMapScalarFieldEnum[];
};

/**
 * LearningMap findFirstOrThrow
 */
export type LearningMapFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter, which LearningMap to fetch.
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LearningMaps to fetch.
   */
  orderBy?:
    | Prisma.LearningMapOrderByWithRelationInput
    | Prisma.LearningMapOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for LearningMaps.
   */
  cursor?: Prisma.LearningMapWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LearningMaps from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LearningMaps.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of LearningMaps.
   */
  distinct?: Prisma.LearningMapScalarFieldEnum | Prisma.LearningMapScalarFieldEnum[];
};

/**
 * LearningMap findMany
 */
export type LearningMapFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter, which LearningMaps to fetch.
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of LearningMaps to fetch.
   */
  orderBy?:
    | Prisma.LearningMapOrderByWithRelationInput
    | Prisma.LearningMapOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing LearningMaps.
   */
  cursor?: Prisma.LearningMapWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` LearningMaps from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` LearningMaps.
   */
  skip?: number;
  distinct?: Prisma.LearningMapScalarFieldEnum | Prisma.LearningMapScalarFieldEnum[];
};

/**
 * LearningMap create
 */
export type LearningMapCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * The data needed to create a LearningMap.
   */
  data: Prisma.XOR<Prisma.LearningMapCreateInput, Prisma.LearningMapUncheckedCreateInput>;
};

/**
 * LearningMap createMany
 */
export type LearningMapCreateManyArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many LearningMaps.
   */
  data: Prisma.LearningMapCreateManyInput | Prisma.LearningMapCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * LearningMap createManyAndReturn
 */
export type LearningMapCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * The data used to create many LearningMaps.
   */
  data: Prisma.LearningMapCreateManyInput | Prisma.LearningMapCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * LearningMap update
 */
export type LearningMapUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * The data needed to update a LearningMap.
   */
  data: Prisma.XOR<Prisma.LearningMapUpdateInput, Prisma.LearningMapUncheckedUpdateInput>;
  /**
   * Choose, which LearningMap to update.
   */
  where: Prisma.LearningMapWhereUniqueInput;
};

/**
 * LearningMap updateMany
 */
export type LearningMapUpdateManyArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update LearningMaps.
   */
  data: Prisma.XOR<
    Prisma.LearningMapUpdateManyMutationInput,
    Prisma.LearningMapUncheckedUpdateManyInput
  >;
  /**
   * Filter which LearningMaps to update
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * Limit how many LearningMaps to update.
   */
  limit?: number;
};

/**
 * LearningMap updateManyAndReturn
 */
export type LearningMapUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * The data used to update LearningMaps.
   */
  data: Prisma.XOR<
    Prisma.LearningMapUpdateManyMutationInput,
    Prisma.LearningMapUncheckedUpdateManyInput
  >;
  /**
   * Filter which LearningMaps to update
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * Limit how many LearningMaps to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * LearningMap upsert
 */
export type LearningMapUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * The filter to search for the LearningMap to update in case it exists.
   */
  where: Prisma.LearningMapWhereUniqueInput;
  /**
   * In case the LearningMap found by the `where` argument doesn't exist, create a new LearningMap with this data.
   */
  create: Prisma.XOR<Prisma.LearningMapCreateInput, Prisma.LearningMapUncheckedCreateInput>;
  /**
   * In case the LearningMap was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LearningMapUpdateInput, Prisma.LearningMapUncheckedUpdateInput>;
};

/**
 * LearningMap delete
 */
export type LearningMapDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
  /**
   * Filter which LearningMap to delete.
   */
  where: Prisma.LearningMapWhereUniqueInput;
};

/**
 * LearningMap deleteMany
 */
export type LearningMapDeleteManyArgs<
  _ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which LearningMaps to delete
   */
  where?: Prisma.LearningMapWhereInput;
  /**
   * Limit how many LearningMaps to delete.
   */
  limit?: number;
};

/**
 * LearningMap.articles
 */
export type LearningMap$articlesArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Article
   */
  select?: Prisma.ArticleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Article
   */
  omit?: Prisma.ArticleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArticleInclude<ExtArgs> | null;
  where?: Prisma.ArticleWhereInput;
  orderBy?: Prisma.ArticleOrderByWithRelationInput | Prisma.ArticleOrderByWithRelationInput[];
  cursor?: Prisma.ArticleWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.ArticleScalarFieldEnum | Prisma.ArticleScalarFieldEnum[];
};

/**
 * LearningMap.questions
 */
export type LearningMap$questionsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Question
   */
  select?: Prisma.QuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Question
   */
  omit?: Prisma.QuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionInclude<ExtArgs> | null;
  where?: Prisma.QuestionWhereInput;
  orderBy?: Prisma.QuestionOrderByWithRelationInput | Prisma.QuestionOrderByWithRelationInput[];
  cursor?: Prisma.QuestionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.QuestionScalarFieldEnum | Prisma.QuestionScalarFieldEnum[];
};

/**
 * LearningMap without action
 */
export type LearningMapDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the LearningMap
   */
  select?: Prisma.LearningMapSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the LearningMap
   */
  omit?: Prisma.LearningMapOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LearningMapInclude<ExtArgs> | null;
};
