// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "./generated/zod"
  addIncludeTypes        = "false"
  addInputTypeValidation = "false"
  addSelectTypes         = "false"
  createInputTypes       = "false"
  createModelTypes       = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id                        String        @id @default(uuid())
  title                     String
  initiallyFamiliarConcepts String[]      @default([])
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  learningMaps              LearningMap[]
}

model LearningMap {
  id        String    @id @default(uuid())
  articles  Article[]
  subjectId String
  subject   Subject   @relation(fields: [subjectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id                String      @id @default(uuid())
  content           String
  summary           String      @default("")
  takeaways         String[]    @default([])
  learningMapId     String
  tooltips          Json?
  isRoot            Boolean     @default(false)
  positionX         Float? // Store X coordinate for graph visualization
  positionY         Float? // Store Y coordinate for graph visualization
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  questions         Question[]  @relation("QuestionSourceArticle")
  answerToQuestions Question[]  @relation("QuestionAnswerArticle")
  learningMap       LearningMap @relation(fields: [learningMapId], references: [id], onDelete: Cascade)
}

model Question {
  id                   String   @id @default(uuid())
  text                 String
  articleId            String
  sourceArticle        Article  @relation("QuestionSourceArticle", fields: [articleId], references: [id], onDelete: Cascade)
  destinationArticleId String?
  destinationArticle   Article? @relation("QuestionAnswerArticle", fields: [destinationArticleId], references: [id])
  positionX            Float? // Store X coordinate for graph visualization
  positionY            Float? // Store Y coordinate for graph visualization
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
