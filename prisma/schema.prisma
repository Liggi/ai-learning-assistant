// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/prisma/generated/zod"
  addIncludeTypes        = "false"
  addInputTypeValidation = "false"
  addSelectTypes         = "false"
  createInputTypes       = "false"
  createModelTypes       = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id                        String        @id @default(uuid())
  title                     String
  initiallyFamiliarConcepts String[]      @default([])
  userId                    String
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  learningMaps              LearningMap[]
}

model LearningMap {
  id        String     @id @default(uuid())
  articles  Article[]
  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
}

model Article {
  id             String      @id @default(uuid())
  content        String
  summary        String      @default("")
  takeaways      String[]    @default([])
  learningMapId  String
  tooltips       Json?
  isRoot         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  learningMap    LearningMap @relation(fields: [learningMapId], references: [id], onDelete: Cascade)
  parentQuestion Question?   @relation("ParentQuestion")
  childQuestions Question[]  @relation("ChildQuestions")
}

model Question {
  id              String   @id @default(uuid())
  text            String
  learningMapId   String
  parentArticleId String
  childArticleId  String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  learningMap   LearningMap @relation(fields: [learningMapId], references: [id], onDelete: Cascade)
  parentArticle Article     @relation("ChildQuestions", fields: [parentArticleId], references: [id], onDelete: Cascade) // If parent deleted, delete question
  childArticle  Article     @relation("ParentQuestion", fields: [childArticleId], references: [id], onDelete: Cascade) // If child deleted, delete question
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  subjects      Subject[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
