/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StaticFlowImport } from './routes/static-flow'
import { Route as StaticChatImport } from './routes/static-chat'
import { Route as StaticImport } from './routes/static'
import { Route as LoadingImport } from './routes/loading'
import { Route as KnowledgeNodesImport } from './routes/knowledge-nodes'
import { Route as WizardRouteImport } from './routes/wizard/route'
import { Route as IndexImport } from './routes/index'
import { Route as StaticFlowIndexImport } from './routes/static-flow.index'
import { Route as WizardSubjectImport } from './routes/wizard/subject'
import { Route as WizardRoadmapImport } from './routes/wizard/roadmap'
import { Route as WizardCalibrationImport } from './routes/wizard/calibration'
import { Route as StaticFlowRoadmapImport } from './routes/static-flow.roadmap'
import { Route as StaticFlowMindmapImport } from './routes/static-flow.mindmap'
import { Route as StaticFlowChatImport } from './routes/static-flow.chat'

// Create/Update Routes

const StaticFlowRoute = StaticFlowImport.update({
  id: '/static-flow',
  path: '/static-flow',
  getParentRoute: () => rootRoute,
} as any)

const StaticChatRoute = StaticChatImport.update({
  id: '/static-chat',
  path: '/static-chat',
  getParentRoute: () => rootRoute,
} as any)

const StaticRoute = StaticImport.update({
  id: '/static',
  path: '/static',
  getParentRoute: () => rootRoute,
} as any)

const LoadingRoute = LoadingImport.update({
  id: '/loading',
  path: '/loading',
  getParentRoute: () => rootRoute,
} as any)

const KnowledgeNodesRoute = KnowledgeNodesImport.update({
  id: '/knowledge-nodes',
  path: '/knowledge-nodes',
  getParentRoute: () => rootRoute,
} as any)

const WizardRouteRoute = WizardRouteImport.update({
  id: '/wizard',
  path: '/wizard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StaticFlowIndexRoute = StaticFlowIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StaticFlowRoute,
} as any)

const WizardSubjectRoute = WizardSubjectImport.update({
  id: '/subject',
  path: '/subject',
  getParentRoute: () => WizardRouteRoute,
} as any)

const WizardRoadmapRoute = WizardRoadmapImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => WizardRouteRoute,
} as any)

const WizardCalibrationRoute = WizardCalibrationImport.update({
  id: '/calibration',
  path: '/calibration',
  getParentRoute: () => WizardRouteRoute,
} as any)

const StaticFlowRoadmapRoute = StaticFlowRoadmapImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => StaticFlowRoute,
} as any)

const StaticFlowMindmapRoute = StaticFlowMindmapImport.update({
  id: '/mindmap',
  path: '/mindmap',
  getParentRoute: () => StaticFlowRoute,
} as any)

const StaticFlowChatRoute = StaticFlowChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => StaticFlowRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/wizard': {
      id: '/wizard'
      path: '/wizard'
      fullPath: '/wizard'
      preLoaderRoute: typeof WizardRouteImport
      parentRoute: typeof rootRoute
    }
    '/knowledge-nodes': {
      id: '/knowledge-nodes'
      path: '/knowledge-nodes'
      fullPath: '/knowledge-nodes'
      preLoaderRoute: typeof KnowledgeNodesImport
      parentRoute: typeof rootRoute
    }
    '/loading': {
      id: '/loading'
      path: '/loading'
      fullPath: '/loading'
      preLoaderRoute: typeof LoadingImport
      parentRoute: typeof rootRoute
    }
    '/static': {
      id: '/static'
      path: '/static'
      fullPath: '/static'
      preLoaderRoute: typeof StaticImport
      parentRoute: typeof rootRoute
    }
    '/static-chat': {
      id: '/static-chat'
      path: '/static-chat'
      fullPath: '/static-chat'
      preLoaderRoute: typeof StaticChatImport
      parentRoute: typeof rootRoute
    }
    '/static-flow': {
      id: '/static-flow'
      path: '/static-flow'
      fullPath: '/static-flow'
      preLoaderRoute: typeof StaticFlowImport
      parentRoute: typeof rootRoute
    }
    '/static-flow/chat': {
      id: '/static-flow/chat'
      path: '/chat'
      fullPath: '/static-flow/chat'
      preLoaderRoute: typeof StaticFlowChatImport
      parentRoute: typeof StaticFlowImport
    }
    '/static-flow/mindmap': {
      id: '/static-flow/mindmap'
      path: '/mindmap'
      fullPath: '/static-flow/mindmap'
      preLoaderRoute: typeof StaticFlowMindmapImport
      parentRoute: typeof StaticFlowImport
    }
    '/static-flow/roadmap': {
      id: '/static-flow/roadmap'
      path: '/roadmap'
      fullPath: '/static-flow/roadmap'
      preLoaderRoute: typeof StaticFlowRoadmapImport
      parentRoute: typeof StaticFlowImport
    }
    '/wizard/calibration': {
      id: '/wizard/calibration'
      path: '/calibration'
      fullPath: '/wizard/calibration'
      preLoaderRoute: typeof WizardCalibrationImport
      parentRoute: typeof WizardRouteImport
    }
    '/wizard/roadmap': {
      id: '/wizard/roadmap'
      path: '/roadmap'
      fullPath: '/wizard/roadmap'
      preLoaderRoute: typeof WizardRoadmapImport
      parentRoute: typeof WizardRouteImport
    }
    '/wizard/subject': {
      id: '/wizard/subject'
      path: '/subject'
      fullPath: '/wizard/subject'
      preLoaderRoute: typeof WizardSubjectImport
      parentRoute: typeof WizardRouteImport
    }
    '/static-flow/': {
      id: '/static-flow/'
      path: '/'
      fullPath: '/static-flow/'
      preLoaderRoute: typeof StaticFlowIndexImport
      parentRoute: typeof StaticFlowImport
    }
  }
}

// Create and export the route tree

interface WizardRouteRouteChildren {
  WizardCalibrationRoute: typeof WizardCalibrationRoute
  WizardRoadmapRoute: typeof WizardRoadmapRoute
  WizardSubjectRoute: typeof WizardSubjectRoute
}

const WizardRouteRouteChildren: WizardRouteRouteChildren = {
  WizardCalibrationRoute: WizardCalibrationRoute,
  WizardRoadmapRoute: WizardRoadmapRoute,
  WizardSubjectRoute: WizardSubjectRoute,
}

const WizardRouteRouteWithChildren = WizardRouteRoute._addFileChildren(
  WizardRouteRouteChildren,
)

interface StaticFlowRouteChildren {
  StaticFlowChatRoute: typeof StaticFlowChatRoute
  StaticFlowMindmapRoute: typeof StaticFlowMindmapRoute
  StaticFlowRoadmapRoute: typeof StaticFlowRoadmapRoute
  StaticFlowIndexRoute: typeof StaticFlowIndexRoute
}

const StaticFlowRouteChildren: StaticFlowRouteChildren = {
  StaticFlowChatRoute: StaticFlowChatRoute,
  StaticFlowMindmapRoute: StaticFlowMindmapRoute,
  StaticFlowRoadmapRoute: StaticFlowRoadmapRoute,
  StaticFlowIndexRoute: StaticFlowIndexRoute,
}

const StaticFlowRouteWithChildren = StaticFlowRoute._addFileChildren(
  StaticFlowRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/wizard': typeof WizardRouteRouteWithChildren
  '/knowledge-nodes': typeof KnowledgeNodesRoute
  '/loading': typeof LoadingRoute
  '/static': typeof StaticRoute
  '/static-chat': typeof StaticChatRoute
  '/static-flow': typeof StaticFlowRouteWithChildren
  '/static-flow/chat': typeof StaticFlowChatRoute
  '/static-flow/mindmap': typeof StaticFlowMindmapRoute
  '/static-flow/roadmap': typeof StaticFlowRoadmapRoute
  '/wizard/calibration': typeof WizardCalibrationRoute
  '/wizard/roadmap': typeof WizardRoadmapRoute
  '/wizard/subject': typeof WizardSubjectRoute
  '/static-flow/': typeof StaticFlowIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/wizard': typeof WizardRouteRouteWithChildren
  '/knowledge-nodes': typeof KnowledgeNodesRoute
  '/loading': typeof LoadingRoute
  '/static': typeof StaticRoute
  '/static-chat': typeof StaticChatRoute
  '/static-flow/chat': typeof StaticFlowChatRoute
  '/static-flow/mindmap': typeof StaticFlowMindmapRoute
  '/static-flow/roadmap': typeof StaticFlowRoadmapRoute
  '/wizard/calibration': typeof WizardCalibrationRoute
  '/wizard/roadmap': typeof WizardRoadmapRoute
  '/wizard/subject': typeof WizardSubjectRoute
  '/static-flow': typeof StaticFlowIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/wizard': typeof WizardRouteRouteWithChildren
  '/knowledge-nodes': typeof KnowledgeNodesRoute
  '/loading': typeof LoadingRoute
  '/static': typeof StaticRoute
  '/static-chat': typeof StaticChatRoute
  '/static-flow': typeof StaticFlowRouteWithChildren
  '/static-flow/chat': typeof StaticFlowChatRoute
  '/static-flow/mindmap': typeof StaticFlowMindmapRoute
  '/static-flow/roadmap': typeof StaticFlowRoadmapRoute
  '/wizard/calibration': typeof WizardCalibrationRoute
  '/wizard/roadmap': typeof WizardRoadmapRoute
  '/wizard/subject': typeof WizardSubjectRoute
  '/static-flow/': typeof StaticFlowIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/wizard'
    | '/knowledge-nodes'
    | '/loading'
    | '/static'
    | '/static-chat'
    | '/static-flow'
    | '/static-flow/chat'
    | '/static-flow/mindmap'
    | '/static-flow/roadmap'
    | '/wizard/calibration'
    | '/wizard/roadmap'
    | '/wizard/subject'
    | '/static-flow/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/wizard'
    | '/knowledge-nodes'
    | '/loading'
    | '/static'
    | '/static-chat'
    | '/static-flow/chat'
    | '/static-flow/mindmap'
    | '/static-flow/roadmap'
    | '/wizard/calibration'
    | '/wizard/roadmap'
    | '/wizard/subject'
    | '/static-flow'
  id:
    | '__root__'
    | '/'
    | '/wizard'
    | '/knowledge-nodes'
    | '/loading'
    | '/static'
    | '/static-chat'
    | '/static-flow'
    | '/static-flow/chat'
    | '/static-flow/mindmap'
    | '/static-flow/roadmap'
    | '/wizard/calibration'
    | '/wizard/roadmap'
    | '/wizard/subject'
    | '/static-flow/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WizardRouteRoute: typeof WizardRouteRouteWithChildren
  KnowledgeNodesRoute: typeof KnowledgeNodesRoute
  LoadingRoute: typeof LoadingRoute
  StaticRoute: typeof StaticRoute
  StaticChatRoute: typeof StaticChatRoute
  StaticFlowRoute: typeof StaticFlowRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WizardRouteRoute: WizardRouteRouteWithChildren,
  KnowledgeNodesRoute: KnowledgeNodesRoute,
  LoadingRoute: LoadingRoute,
  StaticRoute: StaticRoute,
  StaticChatRoute: StaticChatRoute,
  StaticFlowRoute: StaticFlowRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/wizard",
        "/knowledge-nodes",
        "/loading",
        "/static",
        "/static-chat",
        "/static-flow"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/wizard": {
      "filePath": "wizard/route.tsx",
      "children": [
        "/wizard/calibration",
        "/wizard/roadmap",
        "/wizard/subject"
      ]
    },
    "/knowledge-nodes": {
      "filePath": "knowledge-nodes.tsx"
    },
    "/loading": {
      "filePath": "loading.tsx"
    },
    "/static": {
      "filePath": "static.tsx"
    },
    "/static-chat": {
      "filePath": "static-chat.tsx"
    },
    "/static-flow": {
      "filePath": "static-flow.tsx",
      "children": [
        "/static-flow/chat",
        "/static-flow/mindmap",
        "/static-flow/roadmap",
        "/static-flow/"
      ]
    },
    "/static-flow/chat": {
      "filePath": "static-flow.chat.tsx",
      "parent": "/static-flow"
    },
    "/static-flow/mindmap": {
      "filePath": "static-flow.mindmap.tsx",
      "parent": "/static-flow"
    },
    "/static-flow/roadmap": {
      "filePath": "static-flow.roadmap.tsx",
      "parent": "/static-flow"
    },
    "/wizard/calibration": {
      "filePath": "wizard/calibration.tsx",
      "parent": "/wizard"
    },
    "/wizard/roadmap": {
      "filePath": "wizard/roadmap.tsx",
      "parent": "/wizard"
    },
    "/wizard/subject": {
      "filePath": "wizard/subject.tsx",
      "parent": "/wizard"
    },
    "/static-flow/": {
      "filePath": "static-flow.index.tsx",
      "parent": "/static-flow"
    }
  }
}
ROUTE_MANIFEST_END */
